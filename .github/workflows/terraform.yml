name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Do you wish to create or destroy the infrastructure?
        options:
        - create
        - destroy

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: SANDBOX
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Create Terraform Plan Artifact for Apply
      if: contains(github.event.inputs.choice, 'create')
      run: |
        terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -backend-config="token=${{ secrets.AWS_SESSION_TOKEN }}" \
          -backend-config="region=${{ secrets.REGION }}" \
          -backend-config="bucket=${{ secrets.BUCKET }}" \
          -backend-config="key=${{ secrets.ENVIRONMENT }}/${{ secrets.REGION }}/${{ secrets.TAG_CLIENT }}.tfstate"
        sudo apt-get install jq moreutils
        jq '.aws_region = "${{ secrets.REGION }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_env = "${{ secrets.ENVIRONMENT }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_client = "${{ secrets.TAG_CLIENT }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_owner = "${{ secrets.TAG_OWNER }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_prefix = "${{ secrets.TAG_PREFIX }}"' variables.tfvars.json|sponge variables.tfvars.json
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
        export AWS_REGION="${{ secrets.REGION }}"
        terraform plan -out tfplan

    - name: Create Terraform Plan Artifact for Destroy
      if: contains(github.event.inputs.choice, 'destroy')
      run: |
        terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -backend-config="token=${{ secrets.AWS_SESSION_TOKEN }}" \
          -backend-config="region=${{ secrets.REGION }}" \
          -backend-config="bucket=${{ secrets.BUCKET }}" \
          -backend-config="key=${{ secrets.ENVIRONMENT }}/${{ secrets.REGION }}/${{ secrets.TAG_CLIENT }}.tfstate"
        sudo apt-get install jq moreutils
        jq '.aws_region = "${{ secrets.REGION }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_env = "${{ secrets.ENVIRONMENT }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_client = "${{ secrets.TAG_CLIENT }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_owner = "${{ secrets.TAG_OWNER }}"' variables.tfvars.json|sponge variables.tfvars.json
        jq '.tag_prefix = "${{ secrets.TAG_PREFIX }}"' variables.tfvars.json|sponge variables.tfvars.json
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
        export AWS_REGION="${{ secrets.REGION }}"
        terraform plan -destroy -out tfplan

    - name: Terraform Apply
      if: contains(github.event.inputs.choice, 'create')
      run: |
          terraform apply tfplan

    - name: Terraform Destroy
      if: contains(github.event.inputs.choice, 'destroy')
      run: |
          terraform apply -destroy tfplan